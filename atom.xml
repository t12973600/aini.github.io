<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林小博</title>
  
  <subtitle>一个老男孩</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-26T07:54:49.748Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Katalin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>❤️華語流行串燒精選抒情歌曲❤️</title>
    <link href="http://yoursite.com/2020/02/26/2020-02-26-hua-yu-liu-xing-chuan-shao-jing-xuan-shu-qing-ge-qu/"/>
    <id>http://yoursite.com/2020/02/26/2020-02-26-hua-yu-liu-xing-chuan-shao-jing-xuan-shu-qing-ge-qu/</id>
    <published>2020-02-26T07:43:48.000Z</published>
    <updated>2020-02-26T07:54:49.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="❤️華語流行串燒精選抒情歌曲❤️"><a href="#❤️華語流行串燒精選抒情歌曲❤️" class="headerlink" title="❤️華語流行串燒精選抒情歌曲❤️"></a>❤️華語流行串燒精選抒情歌曲❤️</h3><p><img src="http://92.38.188.164/imgs/2020/02/c95d9965b4e96549.png" alt=""></p><iframe src="http://92.38.188.164/mp/50.mp3" width="50" height="120" marginwidth="0" marginheight="0" border="0" frameborder="0" scrolling="no"></iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;❤️華語流行串燒精選抒情歌曲❤️&quot;&gt;&lt;a href=&quot;#❤️華語流行串燒精選抒情歌曲❤️&quot; class=&quot;headerlink&quot; title=&quot;❤️華語流行串燒精選抒情歌曲❤️&quot;&gt;&lt;/a&gt;❤️華語流行串燒精選抒情歌曲❤️&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http
      
    
    </summary>
    
    
      <category term="歌曲" scheme="http://yoursite.com/categories/%E6%AD%8C%E6%9B%B2/"/>
    
    
      <category term="歌曲" scheme="http://yoursite.com/tags/%E6%AD%8C%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>现在大家都是否上班了</title>
    <link href="http://yoursite.com/2020/02/26/zuo-tian-jie-dao-ge-chong-dian-hua-gu-ji-du-kai-shi-shang-ban-liao/"/>
    <id>http://yoursite.com/2020/02/26/zuo-tian-jie-dao-ge-chong-dian-hua-gu-ji-du-kai-shi-shang-ban-liao/</id>
    <published>2020-02-26T04:27:48.000Z</published>
    <updated>2020-02-26T06:25:11.859Z</updated>
    
    <content type="html"><![CDATA[<h3> 😓 昨天接到各种电话估计都开始上班了</h3><ul><li>银行可种还款电话😓,你们的花呗都还清</li></ul><p><img src="http://92.38.188.164/imgs/2020/02/a7c40599301eb46a.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt; 😓 昨天接到各种电话估计都开始上班了&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;银行可种还款电话😓,你们的花呗都还清&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://92.38.188.164/imgs/2020/02/a7c40599301eb46a.png&quot; 
      
    
    </summary>
    
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>小龙虾</title>
    <link href="http://yoursite.com/2020/02/25/xiao-long-xia/"/>
    <id>http://yoursite.com/2020/02/25/xiao-long-xia/</id>
    <published>2020-02-24T21:09:19.000Z</published>
    <updated>2020-02-26T04:18:36.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sparkling-heart-好想吃"><a href="#sparkling-heart-好想吃" class="headerlink" title=":sparkling_heart: 好想吃"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8">💖</span> 好想吃</h3><p><img src="http://92.38.188.164/imgs/2020/02/ffbaaa3a742fa4cd.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;sparkling-heart-好想吃&quot;&gt;&lt;a href=&quot;#sparkling-heart-好想吃&quot; class=&quot;headerlink&quot; title=&quot;:sparkling_heart: 好想吃&quot;&gt;&lt;/a&gt;&lt;span class=&quot;github-emoji&quot; 
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="美食,小龙虾" scheme="http://yoursite.com/tags/%E7%BE%8E%E9%A3%9F-%E5%B0%8F%E9%BE%99%E8%99%BE/"/>
    
  </entry>
  
  <entry>
    <title>看教程终于买了gcorelabs.的伯力VPS了</title>
    <link href="http://yoursite.com/2020/02/25/wang-su-zheng-chang-de-hua-wang-su-huan-shi-ke-yi-de/"/>
    <id>http://yoursite.com/2020/02/25/wang-su-zheng-chang-de-hua-wang-su-huan-shi-ke-yi-de/</id>
    <published>2020-02-24T20:03:48.856Z</published>
    <updated>2020-02-24T20:52:27.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="computer-网速正常的话网速还是可以的"><a href="#computer-网速正常的话网速还是可以的" class="headerlink" title=":computer: 网速正常的话网速还是可以的"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png?v8">💻</span> 网速正常的话网速还是可以的</h3><p>我家是联动的网一般在120/ms，看视频看1080能正常看，4K,8K就别想了也不知道网上是怎么达到的。</p><p><img src="http://92.38.188.164/imgs/2020/02/916b01c8ca7fe461.png" alt=""></p><p>有一个问题就是安装了宝塔，<strong>CPU会突然升到100%，负载状态也是100%</strong>，</p><p>宝塔也只安装了Nginx 1.16.0，是不是用的人太多了。</p><p><img src="http://i1.fuimg.com/710688/2c014d365984ee7f.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;computer-网速正常的话网速还是可以的&quot;&gt;&lt;a href=&quot;#computer-网速正常的话网速还是可以的&quot; class=&quot;headerlink&quot; title=&quot;:computer: 网速正常的话网速还是可以的&quot;&gt;&lt;/a&gt;&lt;span class=&quot;githu
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="vps,教程" scheme="http://yoursite.com/tags/vps-%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>百度个教程都找不到</title>
    <link href="http://yoursite.com/2020/02/24/bai-du-liao-yi-xia-xiang-zhao-ge-yong-zhi-fu-bao-gou-mai-de-jiao-cheng/"/>
    <id>http://yoursite.com/2020/02/24/bai-du-liao-yi-xia-xiang-zhao-ge-yong-zhi-fu-bao-gou-mai-de-jiao-cheng/</id>
    <published>2020-02-24T14:48:55.000Z</published>
    <updated>2020-02-24T14:57:16.294Z</updated>
    
    <content type="html"><![CDATA[<h3 id="globe-with-meridians-百度了一下想找个用支付宝购买的教程"><a href="#globe-with-meridians-百度了一下想找个用支付宝购买的教程" class="headerlink" title=":globe_with_meridians: 百度了一下想找个用支付宝购买的教程"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8">🌐</span> 百度了一下想找个用支付宝购买的教程</h3><h4 id="想买俄罗斯一款VPS，但找不到支付宝付款方式，连这家伙也没有支付，找了一大圈子，居然没一条信息，全是介绍的信息我真的是无语了。"><a href="#想买俄罗斯一款VPS，但找不到支付宝付款方式，连这家伙也没有支付，找了一大圈子，居然没一条信息，全是介绍的信息我真的是无语了。" class="headerlink" title="想买俄罗斯一款VPS，但找不到支付宝付款方式，连这家伙也没有支付，找了一大圈子，居然没一条信息，全是介绍的信息我真的是无语了。"></a>想买俄罗斯一款VPS，但找不到支付宝付款方式，连这家伙也没有支付，<img src="http://i1.fuimg.com/710688/ac77bca1d102d323.png" alt="">找了一大圈子，居然没一条信息，全是介绍的信息我真的是无语了。</h4><p><img src="http://i1.fuimg.com/710688/66a3c30bda359f61.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;globe-with-meridians-百度了一下想找个用支付宝购买的教程&quot;&gt;&lt;a href=&quot;#globe-with-meridians-百度了一下想找个用支付宝购买的教程&quot; class=&quot;headerlink&quot; title=&quot;:globe_with_meri
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/02/24/hello-world/"/>
    <id>http://yoursite.com/2020/02/24/hello-world/</id>
    <published>2020-02-24T06:47:25.804Z</published>
    <updated>2020-02-24T06:47:25.804Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>80后的人都怀旧</title>
    <link href="http://yoursite.com/2020/02/23/mei-ci-zai-meng-zhong-du-neng-meng-dao-yi-qian-de-chang-jing/"/>
    <id>http://yoursite.com/2020/02/23/mei-ci-zai-meng-zhong-du-neng-meng-dao-yi-qian-de-chang-jing/</id>
    <published>2020-02-23T03:57:16.000Z</published>
    <updated>2020-02-25T02:15:20.875Z</updated>
    
    <content type="html"><![CDATA[<h3 id="a-每次在梦中都能梦到以前的场景"><a href="#a-每次在梦中都能梦到以前的场景" class="headerlink" title=":a: 每次在梦中都能梦到以前的场景"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8">🅰</span> 每次在梦中都能梦到以前的场景</h3><p>老是能梦到小时候的一些人物，在家院子里玩耍的场景，那棵杨树…</p><p>我家是最后一间房，后面就是一片草地，经常到那里烧火烤地瓜，</p><p>每次在想能回去该有多好啊…<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f46a.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f46a.png?v8">👪</span> </p><p><img src="http://92.38.188.164/imgs/2020/02/42697758b41ad943.jpeg" alt=""></p><h4 id="长治缝纫机厂，那个年代的人多纯粹。"><a href="#长治缝纫机厂，那个年代的人多纯粹。" class="headerlink" title="长治缝纫机厂，那个年代的人多纯粹。"></a>长治缝纫机厂，那个年代的人多纯粹。</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;a-每次在梦中都能梦到以前的场景&quot;&gt;&lt;a href=&quot;#a-每次在梦中都能梦到以前的场景&quot; class=&quot;headerlink&quot; title=&quot;:a: 每次在梦中都能梦到以前的场景&quot;&gt;&lt;/a&gt;&lt;span class=&quot;github-emoji&quot; style=&quot;co
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日记" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建博客</title>
    <link href="http://yoursite.com/2020/02/23/hexo-github-da-jian-bo-ke/"/>
    <id>http://yoursite.com/2020/02/23/hexo-github-da-jian-bo-ke/</id>
    <published>2020-02-23T02:17:51.000Z</published>
    <updated>2020-02-23T02:28:47.551Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://segmentfault.com/a/1190000021614307?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000021614307?utm_source=tag-newest</a></p><p>图片打不开的到上面的网站查看</p><h1 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a>一、博客环境搭建</h1><blockquote><p>本文系统环境信息：Win10专业版，64位（10.0 版本18362）</p><p>Node.js：12.13.0 Git：2.24.0</p><p>修改配置文件要用到的软件（可选）：</p><ol><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>（适合有开发基础的程序员，非常好用）</li><li>Sublime Text3，可免费使用，<a href="https://pan.baidu.com/s/1uKA-aBHm_CsmJI5GolrV1Q" target="_blank" rel="noopener">百度网盘</a>（提取码：mh0y）</li><li><a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener">NodePad++</a> 7.8.1（最新的，也可以在官网选择其他版本）</li></ol></blockquote><h2 id="1-下载Git和Node-js"><a href="#1-下载Git和Node-js" class="headerlink" title="1. 下载Git和Node.js"></a>1. 下载Git和Node.js</h2><h3 id="1-1-Node-js的安装与配置"><a href="#1-1-Node-js的安装与配置" class="headerlink" title="1.1 Node.js的安装与配置"></a>1.1 Node.js的安装与配置</h3><p>首先去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js官网</a> 下载node.js的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><img src="https://segmentfault.com/img/remote/1460000021614313" alt="Node.js下载以及版本的选择" title="Node.js下载以及版本的选择"></p><p>下载好与电脑系统对应的安装程序后，开始安装流程：</p><p>1.打开下载好的Node.js安装程序，点击Next，进行下一步的安装；</p><p><img src="https://segmentfault.com/img/remote/1460000021614311" alt=""></p><p>2.将”I accept the terms in the License Agreement”前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；</p><p><img src="https://segmentfault.com/img/remote/1460000021614312" alt=""></p><ol><li>选择Node.js安装程序的安装位置，在这里我以”C:Program Filesnodejs”为例，点击Next，进入下一步操作；</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614316" alt=""></p><ol><li>选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击Next，进入下一步操作；</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614314" alt=""></p><ol><li>这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C/C++等，点击Next，进入下一步；</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614315" alt=""></p><ol><li>点击”Install”，等待Node.js安装完成；</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614317" alt=""></p><ol><li>当看到下图所显示的情况，Node.js就成功安装完毕。</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614318" alt=""></p><ol><li>验证安装，并测试Node.js是否加入环境变量，当出现如下图的情况，Node.js安装大功告成。</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614332" alt=""></p><p>如果执行<code>node -v</code>报错的话，那么手动将Node.js的安装路径添加到环境变量中，右击点击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为path的变量名，如下图：</p><p><img src="https://segmentfault.com/img/remote/1460000021614319" alt=""></p><p>选中path，或者双击，然后将你node.js的安装路径放在path变量值的最后面，如果添加之前path值最后有 <font weight="bolder" color="red">英文的分号</font>，则直接将路径添加进去即可，如果没有，先添加分号，然后点击保存，回到桌面，打开cmd（Win+R），执行<code>node -v</code>，看是否成功。</p><ol><li>设置npm的镜像源：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 查看npm的配置npm config list# 默认源npm config set registry https:&#x2F;&#x2F;registry.npmjs.org# 临时改变镜像源npm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org# 永久设置为淘宝镜像源npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org# 另一种方式，编辑 ~&#x2F;.npmrc 加入下面内容registry &#x3D; https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol><li>设置npm的内置路径——&gt;全局模块路径和缓存路径（<font weight="bolder" color="red"><em>可选</em></font>）</li></ol><p>如果不改变内置路径也可，除非你的C盘空间足够bigger，这一步可以略过，不改变的话，它的路径在：</p><blockquote><p>此处参考：<a href="https://blog.csdn.net/jianleking/article/details/79130667" target="_blank" rel="noopener">jyjin的node环境变量配置，npm环境变量配置</a></p></blockquote><ul><li>npm包全局目录：<code>C:/Users/[username]/AppData/Roaming/npm/node_modules</code></li><li>npm包全局命令目录：<code>C:/Users/[username]/AppData/Roaming/npm</code></li><li>npm实际去找全局命令的目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的<code>prefix</code>值</li><li>npm包全局cache目录：<code>C:/Users/[username]/.npmrc</code> 文件内容的<code>cache</code>值</li></ul><p>首先在你Node.js的安装位置，新建两个文件夹，<code>node_global</code>和<code>node_cache</code>，我的路径是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\nodejs\node_globalC:\Program Files\nodejs\node_cache</span><br></pre></td></tr></table></figure><p>然后分别执行的命令就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix&quot;C:\Program Files\nodejs\node_global&quot;npm config set cache &quot;C:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>然后在配置环境变量，右击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量同样的位置，在用户变量的地方，找到path变量进行修改，修改值如下图：</p><p><img src="https://segmentfault.com/img/remote/1460000021614320" alt=""></p><p><img src="https://segmentfault.com/img/remote/1460000021614322" alt=""></p><p>然后就大功告成了，Node.js就安装完毕了，下面开始Git安装。</p><h3 id="1-2-Git的安装与配置"><a href="#1-2-Git的安装与配置" class="headerlink" title="1.2 Git的安装与配置"></a>1.2 Git的安装与配置</h3><p>首先就是去<a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网</a>下载Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p><img src="https://segmentfault.com/img/remote/1460000021614321" alt=""></p><ol><li>下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614325" alt=""></p><ol><li>选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614324" alt=""></p><ol><li>选择你是否创建桌面快捷放方式，其他默认即可，点击Next，进入下一步：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614327" alt=""></p><ol><li>是否将Git快捷方式的目录加入开是菜单栏</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614329" alt=""></p><ol><li>这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里我选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614330" alt=""></p><ol><li>选择安装 Git 时对环境变量PATH的影响，第一种影响较小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614328" alt=""></p><ol><li>选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614323" alt=""></p><ol><li>选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614337" alt=""></p><ol><li>选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614331" alt=""></p><ol><li>最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614326" alt=""></p><ol><li>安装完成</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614338" alt=""></p><ol><li>回到桌面，点击鼠标右键，会出现两个选项<code>Git GUI Here</code>和<code>Git Bash Here</code>，在打开Cmd(Win+R)，分别输入<code>git</code>和<code>git --version</code>，如果出现如下图的情况，即安装成功！</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614340" alt=""></p><p><img src="https://segmentfault.com/img/remote/1460000021614339" alt=""></p><h1 id="二、Github注册以及Github-Pages创建"><a href="#二、Github注册以及Github-Pages创建" class="headerlink" title="二、Github注册以及Github Pages创建"></a>二、Github注册以及Github Pages创建</h1><ol><li>打开Github<a href="https://github.com/" target="_blank" rel="noopener">官网首页</a>，点击右上角的<strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li></ol><p><img src="https://segmentfault.com/img/remote/1460000021614333" alt=""></p><p><img src="https://segmentfault.com/img/remote/1460000021614334" alt=""></p><p><img src="https://segmentfault.com/img/remote/1460000021614335" alt=""></p><p>验证完成后，点击Next：Select a plan，会出现如上图的验证界面，同理，只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择Free，下方的两个选项可选可不选，点击<strong>Continue</strong>继续：</p><p><img src="https://segmentfault.com/img/remote/1460000021614346" alt=""></p><p>这时Github会给你发一封邮件，验证一下即可，验证过后才可以创建库。</p><p><img src="https://segmentfault.com/img/remote/1460000021614336" alt=""></p><p>验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&lt;用户名&gt;.github.io</code>，<code>Description</code>为描述仓库，自定义写，填写必要的描述，也可不填。勾选<code>Initialize this repository with a README</code>点击<code>Creat repository</code>进行创建。</p><p><img src="https://segmentfault.com/img/remote/1460000021614345" alt=""></p><p>然后就会出现如图所示的界面，即仓库创建成功！</p><p><img src="https://segmentfault.com/img/remote/1460000021614342" alt=""></p><p>我们来测试一下，点击<code>Create new file</code>，出现如下界面，然后命名文件名为<code>index.html</code>，在填写如图的内容，再点击<code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址<code>https://&lt;你的用户名&gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p><img src="https://segmentfault.com/img/remote/1460000021614341" alt=""></p><p><img src="https://segmentfault.com/img/remote/1460000021614344" alt=""></p><p><img src="https://segmentfault.com/img/remote/1460000021614343" alt=""></p><p>至此，Github的注册以及Github Pages已经创建完成了。</p><h1 id="三、配置Git用户名和邮箱"><a href="#三、配置Git用户名和邮箱" class="headerlink" title="三、配置Git用户名和邮箱"></a>三、配置Git用户名和邮箱</h1><p>在桌面点击鼠标右键，点击<code>Git Bash Here</code>，会出现一个界面如下图所示：</p><p><img src="https://segmentfault.com/img/remote/1460000021614351" alt=""></p><p>然后分别输入下面的两个命令，并回车：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;此处填写你注册时的用户名&quot;git config --global user.email &quot;此处填写你注册时的邮箱&quot;# 一般只要不报错，可以跳过下面寻找.gitconfig文件</span><br></pre></td></tr></table></figure><p>然后找到<code>.gitconfig</code>文件，文件存放位置在<code>C:/Users/[username]/.gitconfig</code>（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！</p><p><img src="https://segmentfault.com/img/remote/1460000021614352" alt=""></p><h1 id="四、本地安装hexo静态博客框架以及发布到Github-Pages"><a href="#四、本地安装hexo静态博客框架以及发布到Github-Pages" class="headerlink" title="四、本地安装hexo静态博客框架以及发布到Github Pages"></a>四、本地安装hexo静态博客框架以及发布到Github Pages</h1><ol><li>首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blogtest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择<code>Git Bash Here</code>，然后依次输入如下命令，：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># hexo框架的安装npm install -g hexo-cli# 等上一个命令完成后，在输入下面的命令hexo init &lt;新建文件夹的名称&gt;  #初始化文件夹cd &lt;新建文件夹的名称&gt;npm install  # 安装博客所需要的依赖文件</span><br></pre></td></tr></table></figure><p><img src="https://segmentfault.com/img/remote/1460000021614353" alt=""></p><p><img src="https://segmentfault.com/img/remote/1460000021614354" alt=""></p><p>等待运行完成，此时文件夹中多了许多文件。<br><strong>注意</strong>：<strong>后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。</strong><br>此时Hexo框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo ghexo s</span><br></pre></td></tr></table></figure><p><img src="https://segmentfault.com/img/remote/1460000021614348" alt=""></p><p>浏览器中打开<a href="http://locakhost/" target="_blank" rel="noopener">http://locakhost</a>:4000或者127.0.0.1:4000，可以看到一个网页，说明Hexo博客已经成功在本地运行。</p><p><img src="https://segmentfault.com/img/remote/1460000021614347" alt=""></p><h2 id="1-本地博客发布到Github-Pages"><a href="#1-本地博客发布到Github-Pages" class="headerlink" title="1. 本地博客发布到Github Pages"></a>1. 本地博客发布到Github Pages</h2><p>之前的步骤中，我们已经完成了对Github账户的注册以及Github Pages的创建，接下来是将本地博客发布至Github Pages。</p><ol><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol><li>紧接着，将本地目录与GitHub关联起来，输入下面的命令行：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure><p>输入后一直回车，然后在<code>C:/Users/[username]</code>目录下找到名为<code>.ssh</code>的文件夹， 文件夹内会有两个文件，一个<code>id_rsa.pub</code>一个<code>id_rsa</code>，用文本编辑器打开<code>id_rsa.pub</code>，复制里面的的内容。 然后打开Github，点击右上角的头像 <strong>Settings</strong> 选择<strong>SSH and GPG keys</strong></p><p><img src="https://segmentfault.com/img/remote/1460000021614349" alt=""></p><p>点击<strong>New SSH key</strong> 将之前复制的内容粘帖到Key的框中。 上面的<strong>Title</strong>可以随意，点击<strong>Add SSH key</strong> 完成添加。</p><p><img src="https://segmentfault.com/img/remote/1460000021614350" alt=""></p><p>然后回到Git的命令行界面，测试一下是否与GitHub连接成功。输入下面的命令行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>点击回车，然后会出现一个询问内容，输入<code>yes</code>，回车，会出现一段内容， <code>Hi &lt;account name&gt;! You&#39;ve successfully authenticated, but GitHub doesnot provide shell access.</code> 。 说明连接成功。此处这个<code>&lt;account name&gt;</code>应该是你Github的用户名。</p><ol><li>进入博客站点目录，用文本编辑器打开<code>_config.yml</code>，这个<code>_config.yml</code>是博客的配置文件，在以后的博客修改，如个性化修改，博客SEO优化等都会使用到，修改如下图的几个地方：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种   timezone: 时区</span><br></pre></td></tr></table></figure><p><img src="https://segmentfault.com/img/remote/1460000021614355" alt=""></p><p>滑到文件最底部，有一个deploy，在deploy下面添加一个repo项 ，一个branch项。填入如下代码，并如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: gitrepo: git@github.com:Github用户名&#x2F;github用户名.github.io.git  &#x2F;&#x2F;也可使用https地址，如：https:&#x2F;&#x2F;github.com&#x2F;Github用户名&#x2F;Github用户名.github.io.git            branch: master</span><br></pre></td></tr></table></figure><p><img src="https://segmentfault.com/img/remote/1460000021614356" alt=""></p><ol><li>最后就是生成页面，并发布至Github Pages，执行如下命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 也可以直接输入此命令，直接完成渲染和上传hexo g -d</span><br></pre></td></tr></table></figure><p>上传完成后，在浏览器中打开<strong><a href="https://%26lt/" target="_blank" rel="noopener">https://&amp;lt</a>;用户名&gt;.github.io</strong>，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。</p><h1 id="五、hexo博客主题安装以及一些个性化修改"><a href="#五、hexo博客主题安装以及一些个性化修改" class="headerlink" title="五、hexo博客主题安装以及一些个性化修改"></a>五、hexo博客主题安装以及一些个性化修改</h1><blockquote><p><strong>转自：</strong><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README.md" target="_blank" rel="noopener">🇺🇸English Document</a> | <a href="https://blinkfox.github.io/" target="_blank" rel="noopener">演示示例</a> | QQ 交流群1（已满）: <a href="https://jq.qq.com/?_wv=1027&k=5zMDYHT" target="_blank" rel="noopener"><code>926552981</code></a> | QQ 交流群2（推荐）: <a href="https://jq.qq.com/?_wv=1027&k=53q2Ayp" target="_blank" rel="noopener"><code>971887688</code></a></p><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</li></ul><h2 id="1-主题下载与安装"><a href="#1-主题下载与安装" class="headerlink" title="1. 主题下载与安装"></a>1. 主题下载与安装</h2><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">传送门</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本(不定期更新优化)，自主选择版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery themes&#x2F;matery     # 稳定版git clone -b develop https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery themes&#x2F;matery   #最新版(不定期进行优化更新)</span><br></pre></td></tr></table></figure><h2 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2. 主题配置"></a>2. 主题配置</h2><h3 id="2-1-切换主题"><a href="#2-1-切换主题" class="headerlink" title="2.1 切换主题"></a>2.1 切换主题</h3><blockquote><p><strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件，站点配置文件就是根目录下的配置文件，比如我的博客文件在<code>F:\blog</code>下，那么站点配置文件就是<code>F:\blog\_config.yml</code>，主题配置文件就是<code>F:\blog\themes\matery\_config.yml</code>。</p><p>另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。</p></blockquote><p>主题下载完成后，将站点配置文件中的<code>theme</code>值修改为你下载主题的文件名，此处为<code>matery</code>，那么值就修改为<code>theme: matery</code>。</p><p>一些站点配置文件的其他地方的修改：</p><ul><li>语言选择：如果为中文用户，则在<code>language:</code>后添加值<code>zh-CN</code>，如果不修改，默认为英语；</li><li>网址修改：<code>url:</code>的值为你的网址名，如<code>http://xxxx.github.io</code>，如果有域名，则修改为你的域名即可，至于有关域名的修改解析，后面我会说到，这里先不说了。</li><li>站点配置文件有个<code>per_page属性</code>，建议修改为6的倍数，这样网站在适应设备时，有较好的显示效果。</li></ul><h3 id="2-2-新建标签-tags-页面"><a href="#2-2-新建标签-tags-页面" class="headerlink" title="2.2 新建标签 tags 页面"></a>2.2 新建标签 tags 页面</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: tagsdate: 2018-09-30 18:23:38type: &quot;tags&quot;layout: &quot;tags&quot;---</span><br></pre></td></tr></table></figure><h3 id="2-3-新建分类-categories-页面"><a href="#2-3-新建分类-categories-页面" class="headerlink" title="2.3 新建分类 categories 页面"></a>2.3 新建分类 categories 页面</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: categoriesdate: 2018-09-30 17:25:30type: &quot;categories&quot;layout: &quot;categories&quot;---</span><br></pre></td></tr></table></figure><h3 id="2-4-新建关于我-about-页面"><a href="#2-4-新建关于我-about-页面" class="headerlink" title="2.4 新建关于我 about 页面"></a>2.4 新建关于我 about 页面</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: aboutdate: 2018-09-30 17:25:30type: &quot;about&quot;layout: &quot;about&quot;---</span><br></pre></td></tr></table></figure><h3 id="2-5-新建留言板-contact-页面-可选"><a href="#2-5-新建留言板-contact-页面-可选" class="headerlink" title="2.5 新建留言板 contact 页面 (可选)"></a>2.5 新建留言板 contact 页面 (可选)</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;contact&quot;</span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: contactdate: 2018-09-30 17:25:30type: &quot;contact&quot;layout: &quot;contact&quot;---</span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="2-6-新建友情链接-friends-页面-可选"><a href="#2-6-新建友情链接-friends-页面-可选" class="headerlink" title="2.6 新建友情链接 friends 页面 (可选)"></a>2.6 新建友情链接 friends 页面 (可选)</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;friends&quot;</span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: friendsdate: 2018-12-12 21:25:30type: &quot;friends&quot;layout: &quot;friends&quot;---</span><br></pre></td></tr></table></figure><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;1_qq_27922023.jpg&quot;,    &quot;name&quot;: &quot;码酱&quot;,    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;luokangyuan.com&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;4027734.jpeg&quot;,    &quot;name&quot;: &quot;闪烁之狐&quot;,    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;blinkfox.github.io&#x2F;&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;, &#123;    &quot;avatar&quot;: &quot;http:&#x2F;&#x2F;image.luokangyuan.com&#x2F;avatar.jpg&quot;,    &quot;name&quot;: &quot;ja_rome&quot;,    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,    &quot;url&quot;: &quot;https:&#x2F;&#x2F;me.csdn.net&#x2F;jlh912008548&quot;,    &quot;title&quot;: &quot;前去学习&quot;&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-7-菜单导航配置"><a href="#2-7-菜单导航配置" class="headerlink" title="2.7 菜单导航配置"></a>2.7 菜单导航配置</h3><h4 id="2-7-1-配置基本菜单导航的名称、路径url和图标icon"><a href="#2-7-1-配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="2.7.1. 配置基本菜单导航的名称、路径url和图标icon."></a>2.7.1. 配置基本菜单导航的名称、路径url和图标icon.</h4><ol><li>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)</li><li>图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu:  Index:    url: &#x2F;    icon: fas fa-home  Tags:    url: &#x2F;tags    icon: fas fa-tags  Categories:    url: &#x2F;categories    icon: fas fa-bookmark  Archives:    url: &#x2F;archives    icon: fas fa-archive  About:    url: &#x2F;about    icon: fas fa-user-circle  Friends:    url: &#x2F;friends    icon: fas fa-address-book</span><br></pre></td></tr></table></figure><h4 id="2-7-2-二级菜单配置方法"><a href="#2-7-2-二级菜单配置方法" class="headerlink" title="2.7.2. 二级菜单配置方法"></a>2.7.2. 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu:  Index:    url: &#x2F;    icon: fas fa-home  Tags:    url: &#x2F;tags    icon: fas fa-tags  Categories:    url: &#x2F;categories    icon: fas fa-bookmark  Archives:    url: &#x2F;archives    icon: fas fa-archive  About:    url: &#x2F;about    icon: fas fa-user-circle-o  Friends:    url: &#x2F;friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: &#x2F;musics        icon: fas fa-music      - name: Movies        url: &#x2F;movies        icon: fas fa-film      - name: Books        url: &#x2F;books        icon: fas fa-book      - name: Galleries        url: &#x2F;galleries        icon: fas fa-image</span><br></pre></td></tr></table></figure><h3 id="2-8-添加emoji表情支持（可选的）"><a href="#2-8-添加emoji表情支持（可选的）" class="headerlink" title="2.8 添加emoji表情支持（可选的）"></a>2.8 添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="2-9-代码高亮"><a href="#2-9-代码高亮" class="headerlink" title="2.9 代码高亮"></a>2.9 代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-prism-plugin</span><br></pre></td></tr></table></figure><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</span><br></pre></td></tr></table></figure><h3 id="2-10-搜索"><a href="#2-10-搜索" class="headerlink" title="2.10 搜索"></a>2.10 搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search:  path: search.xml  field: post</span><br></pre></td></tr></table></figure><h3 id="2-11-中文链接转拼音（可选的）"><a href="#2-11-中文链接转拼音（可选的）" class="headerlink" title="2.11 中文链接转拼音（可选的）"></a>2.11 中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="2-12-文章字数统计插件（可选的）"><a href="#2-12-文章字数统计插件（可选的）" class="headerlink" title="2.12 文章字数统计插件（可选的）"></a>2.12 文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</span><br></pre></td></tr></table></figure><h3 id="2-13-添加-RSS-订阅支持（可选的）"><a href="#2-13-添加-RSS-订阅支持（可选的）" class="headerlink" title="2.13 添加 RSS 订阅支持（可选的）"></a>2.13 添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date</span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="2-14-添加-DaoVoice-在线聊天功能（可选的）"><a href="#2-14-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="2.14 添加 DaoVoice 在线聊天功能（可选的）"></a>2.14 添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中</p><h3 id="2-15-添加-Tidio-在线聊天功能（可选的）"><a href="#2-15-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="2.15 添加 Tidio 在线聊天功能（可选的）"></a>2.15 添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="2-16-修改页脚"><a href="#2-16-修改页脚" class="headerlink" title="2.16 修改页脚"></a>2.16 修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="2-17-修改社交链接"><a href="#2-17-修改社交链接" class="headerlink" title="2.17 修改社交链接"></a>2.17 修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.socialLink.github) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.github %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;访问我的GitHub&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-github&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="2-18-修改打赏的二维码图片"><a href="#2-18-修改打赏的二维码图片" class="headerlink" title="2.18 修改打赏的二维码图片"></a>2.18 修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="2-19-配置音乐播放器（可选的）"><a href="#2-19-配置音乐播放器（可选的）" class="headerlink" title="2.19 配置音乐播放器（可选的）"></a>2.19 配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;    &quot;name&quot;: &quot;五月雨变奏电音&quot;,    &quot;artist&quot;: &quot;AnimeVibe&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music1.mp3&quot;,    &quot;cover&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music-cover1.png&quot;&#125;, &#123;    &quot;name&quot;: &quot;Take me hand&quot;,    &quot;artist&quot;: &quot;DAISHI DANCE,Cecile Corbel&quot;,    &quot;url&quot;: &quot;&#x2F;medias&#x2F;music&#x2F;music2.mp3&quot;,    &quot;cover&quot;: &quot;&#x2F;medias&#x2F;music&#x2F;cover2.png&quot;&#125;, &#123;    &quot;name&quot;: &quot;Shape of You&quot;,    &quot;artist&quot;: &quot;J.Fla&quot;,    &quot;url&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music3.mp3&quot;,    &quot;cover&quot;: &quot;http:&#x2F;&#x2F;xxx.com&#x2F;music-cover3.png&quot;&#125;]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 是否在首页显示音乐.music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39; # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;list&#39; # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39; # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度</span><br></pre></td></tr></table></figure><h2 id="3-文章-Front-matter-介绍"><a href="#3-文章-Front-matter-介绍" class="headerlink" title="3. 文章 Front-matter 介绍"></a>3. 文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</span><br></pre></td></tr></table></figure><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</span><br></pre></td></tr></table></figure><h2 id="4-效果截图"><a href="#4-效果截图" class="headerlink" title="4. 效果截图"></a>4. 效果截图</h2><blockquote><p><strong>最新版本进行了优化更新，效果图与最初的效果图有差别，下面的图不是最新版本的。</strong></p></blockquote><p><img src="https://segmentfault.com/img/remote/1460000021614358" alt="首页" title="首页"></p><p><img src="https://segmentfault.com/img/remote/1460000021614357" alt="首页推荐文章" title="首页推荐文章"></p><p><img src="https://segmentfault.com/img/remote/1460000021614360" alt="首页文章列表" title="首页文章列表"></p><p><img src="https://segmentfault.com/img/remote/1460000021614362" alt="关于我页面" title="关于我页面"></p><p><img src="https://segmentfault.com/img/remote/1460000021614361" alt="文章详细页面" title="文章详细页面"></p><h2 id="5-自定制修改"><a href="#5-自定制修改" class="headerlink" title="5. 自定制修改"></a>5. 自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="5-1-修改主题颜色"><a href="#5-1-修改主题颜色" class="headerlink" title="5.1 修改主题颜色"></a>5.1 修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. *&#x2F;.bg-color &#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);&#125;&#x2F;*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*&#x2F;@-webkit-keyframes rainbow &#123;   &#x2F;* 动态切换背景颜色. *&#x2F;&#125;@keyframes rainbow &#123;    &#x2F;* 动态切换背景颜色. *&#x2F;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-修改-banner-图和文章特色图"><a href="#5-2-修改-banner-图和文章特色图" class="headerlink" title="5.2 修改 banner 图和文章特色图"></a>5.2 修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);</span><br></pre></td></tr></table></figure><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>如果想改为每小时或者每分钟切换banner图的话，需要将<code>getDay()</code>改为<code>getHours()</code>或者<code>getMinutes()</code>即可。</p><h3 id="5-3-修改网站相关信息"><a href="#5-3-修改网站相关信息" class="headerlink" title="5.3 修改网站相关信息"></a>5.3 修改网站相关信息</h3><p>首先看一个图，如下：</p><img src="https://cdn.jsdelivr.net/gh/Yafine/Yafine-imgs/images/20200115115221.png" style="zoom:80%;" /><p>紧接着放上相关的配置文件信息：</p><ol><li>网站信息的修改</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#这是根目录下的配置文件信息title: 过客~励む   #这是网站标题subtitle: 励む    #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description: 专注于Web,分享生活,分享知识  #网站描述keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等]  #网站的关键词author: YangAir  #作者，文章版权所显示的language: zh-CN  #网站语言，不填写，默认为英文timezone:   #时区，可以不填写</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.6&#x2F;source&#x2F;favicon.pnglogo: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.6&#x2F;source&#x2F;logo.png# 网站副标题，打字效果# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:   enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub1: 志之所向，金石为开，谁能御之？  sub2: 花开不是为了花落，而是为了开的更加灿烂。  sub3: 没有伞的孩子必须努力奔跑！  sub4: 欲望以提升热忱，毅力以磨平高山。  sub5: 如果放弃太早，你永远都不知道自己会错过什么。  sub6: 没有礁石，就没有美丽的浪花；没有挫折，就没有壮丽的人生。</span><br></pre></td></tr></table></figure><p><strong><font color="red">注意：</font></strong></p><p>网站打字效果副标题默认有两个，即<code>sub1</code>和<code>sub2</code>，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在<code>sub1</code>和<code>sub2</code>后面继续添加即可，然后在去主题目录下的<code>layout</code>文件夹下的<code>_partial</code>文件夹，修改<code>bg-cover-content.ejs</code>文件，大约在12行左右，如下面所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;description center-align&quot;&gt;     &lt;% if (theme.subtitle.enable) &#123; %&gt;         &lt;span id&#x3D;&quot;subtitle&quot;&gt;&lt;&#x2F;span&gt;         &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;typed.js@2.0.11&quot;&gt;&lt;&#x2F;script&gt;        &lt;script&gt;            var typed &#x3D; new Typed(&quot;#subtitle&quot;, &#123;                strings: [&#39;&lt;%&#x3D; theme.subtitle.sub1 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub2 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub3 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub4 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub5 %&gt;&#39;,                          &#39;&lt;%&#x3D; theme.subtitle.sub6 %&gt;&#39;],                 startDelay: &lt;%&#x3D; theme.subtitle.startDelay %&gt;,                 typeSpeed: &lt;%&#x3D; theme.subtitle.typeSpeed %&gt;,                 loop: &lt;%&#x3D; theme.subtitle.loop %&gt;,                    backSpeed: &lt;%&#x3D; theme.subtitle.backSpeed %&gt;,                 showCursor: &lt;%&#x3D; theme.subtitle.showCursor %&gt;              &#125;);          &lt;&#x2F;script&gt;      &lt;% &#125; else &#123; %&gt;            &lt;%&#x3D; config.description %&gt;      &lt;% &#125; %&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ol><li>社交链接的修改</li></ol><p>默认的配置信息为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  github:  https:&#x2F;&#x2F;github.com&#x2F;blinkfox  email: 1181062873@qq.com  facebook: # https:&#x2F;&#x2F;www.facebook.com&#x2F;xxx  twitter: # https:&#x2F;&#x2F;twitter.com&#x2F;xxx  qq: 1181062873  weibo: # https:&#x2F;&#x2F;weibo.com&#x2F;xxx  zhihu: # https:&#x2F;&#x2F;www.zhihu.com&#x2F;xxx  rss: true # true、false</span><br></pre></td></tr></table></figure><p>如果想添加简书，CSDN，掘金，博客园等等，需要在主题配置文件添加相关配置，如下是我个人的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socialLink:  qq: 1035800145  weixin: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;wechat.png  github: https:&#x2F;&#x2F;github.com&#x2F;Yafine  email: mailto:1035800145@qq.com  facebook: # https:&#x2F;&#x2F;www.facebook.com&#x2F;xxx  twitter: # https:&#x2F;&#x2F;twitter.com&#x2F;xxx  weibo: # https:&#x2F;&#x2F;weibo.com&#x2F;xxx  zhihu: https:&#x2F;&#x2F;www.zhihu.com&#x2F;people&#x2F;xuan-tian-40-64&#x2F;activities  juejin: https:&#x2F;&#x2F;juejin.im&#x2F;user&#x2F;5a902053f265da4e7527ae71&#x2F;activities  csdn: https:&#x2F;&#x2F;blog.csdn.net&#x2F;victoryxa  jianshu: https:&#x2F;&#x2F;www.jianshu.com&#x2F;u&#x2F;3b3856869772  cnblogs: https:&#x2F;&#x2F;www.cnblogs.com&#x2F;yafine&#x2F;  rss: true # true、false</span><br></pre></td></tr></table></figure><p>其中的<code>weixin</code>我是用的图片链接，会跳转到一个新的标签页，之后还需要修改<code>ejs</code>文件，文件在主题目录下的<code>layout</code>文件夹下的<code>_partial</code>文件夹，修改<code>social-link.ejs</code>，添加相关的配置，我个人添加的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.socialLink.jianshu) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.jianshu %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的简书: &lt;%&#x3D; theme.socialLink.jianshu %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-jianshu&quot;&gt;简&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.csdn) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.csdn %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的CSDN: &lt;%&#x3D; theme.socialLink.csdn %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-csdn&quot;&gt;C&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.juejin) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.juejin %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的掘金: &lt;%&#x3D; theme.socialLink.juejin %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-juejin&quot;&gt;掘&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.cnblogs) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.cnblogs %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;关注我的博客园: &lt;%&#x3D; theme.socialLink.cnblogs %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-juejin&quot;&gt;博&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;&lt;% if (theme.socialLink.weixin) &#123; %&gt;    &lt;a href&#x3D;&quot;&lt;%&#x3D; theme.socialLink.weixin %&gt;&quot; class&#x3D;&quot;tooltipped&quot; target&#x3D;&quot;_blank&quot; data-tooltip&#x3D;&quot;微信联系我: &lt;%&#x3D; theme.socialLink.weixin %&gt;&quot; data-position&#x3D;&quot;top&quot; data-delay&#x3D;&quot;50&quot;&gt;        &lt;i class&#x3D;&quot;fab fa-weixin&quot;&gt;&lt;&#x2F;i&gt;    &lt;&#x2F;a&gt;&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="6-版本记录"><a href="#6-版本记录" class="headerlink" title="6. 版本记录"></a>6. 版本记录</h2><ul><li><p>v1.2.2</p><ul><li>新增了自定义文章 <code>keywords</code> 的功能；</li><li>新增静态彩带点击切换的功能和配置；</li><li>将文章字数统计、彩带和站点运行时间等功能默认设置为 <code>false</code>；</li><li>修改了文章的 <code>description</code> 的 meta 属性优先读取文章的 <code>summary</code> 属性；</li><li>修改了文章标题的 HTML 标签，从 <code>div</code> 改成了 <code>h1</code> 标题；</li><li>修改了页脚年份显示不正确的问题；</li><li>去掉了站点运行时间中多余的 <code>setTimeout</code> 代码；</li></ul></li><li><p>v1.2.1</p><ul><li>新增了 TOC 的展开目录层级设置和滚动条功能，防止目录较多的时候目录溢出；</li><li>修改了首页的展示方式为以前的模式；</li><li>修复首页按钮没有边框的问题；</li><li>修复了音乐及吸底模式、视频、推荐文章等不激活时仍然生成首页卡片的问题；</li><li>修复 wordCount 插件未安装的问题，修改了部分配置；</li><li>修复音乐的 JSON 配置中有单引号的情况页面不显示的音乐的问题</li><li>修复标签云在Hexo4.0下链接失效的问题；</li></ul></li><li><p>v1.2.0</p><ul><li>新增了 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 的在线聊天功能；</li><li>新增了两级菜单的功能；</li><li>新增了打字效果的副标题；</li><li>新增了网页内容预加载的功能；</li><li>新增了首页 banner 是否每日切换的配置功能；</li><li>新增了显示 ICP 备案信息的功能，默认未开启；</li><li>新增了百度分析的配置；</li><li>新增了代码块的语言显示、一键复制、显示行号等功能；</li><li>新增了首页轮播图和推荐文章可自定义配置的功能；</li><li>新增了文章页面显示更新日期；</li><li>新增了转载规则的图标；</li><li>修改了分享的布局和显示方式；</li><li>升级更新了部分依赖库的版本；</li><li>其他细节修改和优化；</li></ul></li><li><p>v1.1.0</p><ul><li>新增了 <code>emoji</code> 的支持；</li><li>新增了站点运行时间统计及配置；</li><li>新增了留言板的功能,默认未开启；</li><li>新增了 <code>Twitter</code>、<code>Facebook</code>、知乎的社交链接；</li><li>更新了 <code>Valine</code> 的版本为最新版；</li><li>其他小细节的修改；</li></ul></li><li><p>v1.0.4</p><ul><li>新增了能为每篇文章都自定义转载规则的功能；</li><li>修复上一页、下一页的自定义 <code>summary</code> 不显示的问题；</li><li>修复了友情链接显示错位的问题，改为了瀑布流的布局方式；</li><li>其他小细节 bug 的修改；</li></ul></li><li><p>v1.0.3</p><ul><li>新增了<code>TOC</code>展开、收缩的按钮和相关配置，默认显示此按钮；</li></ul></li><li><p>v1.0.2</p><ul><li>升级了 <a href="https://materializecss.com/" target="_blank" rel="noopener">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li><li><p>v1.0.1</p><ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li><p>v1.0.0</p><ul><li>新增了所有基础功能；</li></ul></li></ul><h1 id="六、其他一些DIY-可选"><a href="#六、其他一些DIY-可选" class="headerlink" title="六、其他一些DIY(可选)"></a>六、其他一些DIY(可选)</h1><blockquote><p>主题DIY会涉及到js文件和css文件等的修改，个人建议新增的js文件放在<code>themes/matery/layout/layout.ejs</code>这个文件下，这样会稍微加快博客访问的速度。不想花钱​最好的方式是使用cdn.jsdeliver。以后会说到。</p></blockquote><h2 id="1-动态标题"><a href="#1-动态标题" class="headerlink" title="1. 动态标题"></a>1. 动态标题</h2><p>先放上效果图再说：</p><p><img src="https://segmentfault.com/img/remote/1460000021614359" alt="离开当前页面时" title="离开当前页面时"><img src="https://segmentfault.com/img/remote/1460000021614363" alt="返回当前页面时" title="返回当前页面时"></p><p>实现方法，引入js文件，在主题文件下的<code>/source/js/</code>下新建<code>FunnyTitle.js</code>，然后在添加到<code>themes/matery/layout/layout.ejs</code>或者添加到<code>themes/matery/layout/_partial/head.ejs</code>，其代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--浏览器搞笑标题--&gt; var OriginTitle &#x3D; document.title; var titleTime; document.addEventListener(&#39;visibilitychange&#39;, function () &#123;     if (document.hidden) &#123;         $(&#39;[rel&#x3D;&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;favicon.png&quot;);         document.title &#x3D; &#39;ヽ(●-&#96;Д´-)ノ你要玩捉迷藏嘛&#39;;         clearTimeout(titleTime);     &#125;     else &#123;         $(&#39;[rel&#x3D;&quot;icon&quot;]&#39;).attr(&#39;href&#39;, &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;favicon.png&quot;);         document.title &#x3D; &#39;ヾ(Ő∀Ő3)ノ好哦！&#39; + OriginTitle;         titleTime &#x3D; setTimeout(function () &#123;             document.title &#x3D; OriginTitle;         &#125;, 2000);     &#125; &#125;);</span><br></pre></td></tr></table></figure><p>我的链接：<strong><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/FunnyTitle.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/Y…</a></strong>（理论上一直有效）</p><p>或者直接在<code>themes/matery/layout/layout.ejs</code>文件中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;    var OriginTitile&#x3D;document.title,st;    document.addEventListener(&quot;visibilitychange&quot;,function()&#123;        document.hidden?(document.title&#x3D;&quot;ヽ(●-&#96;Д´-)ノ你要玩捉迷藏嘛&quot;,clearTimeout(st)):(document.title&#x3D;&quot;(Ő∀Ő3)ノ好哦！&quot;,st&#x3D;setTimeout(function()&#123;document.title&#x3D;OriginTitile&#125;,3e3))    &#125;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-修改导航栏颜色以及透明效果"><a href="#2-修改导航栏颜色以及透明效果" class="headerlink" title="2. 修改导航栏颜色以及透明效果"></a>2. 修改导航栏颜色以及透明效果</h2><p>打开<code>themes/matery/source/css/matery.css</code>文件，大约在250行，有一个<code>.bg-color</code>属性，修改其属性值即可，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.bg-color &#123;    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); &#x2F;&#x2F;修改成自己喜欢的颜色值    opacity: 0.8;  &#x2F;&#x2F;透明效果 值范围 0~1，看情况自己修改&#125;</span><br></pre></td></tr></table></figure><h2 id="3-添加动态诗词"><a href="#3-添加动态诗词" class="headerlink" title="3. 添加动态诗词"></a>3. 添加动态诗词</h2><p>采用的是<a href="https://www.jinrishici.com/" target="_blank" rel="noopener">今日诗词</a>，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有<a href="https://www.jinrishici.com/doc/" target="_blank" rel="noopener">API文档</a>，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，在<code>/themes/matery/layout/_partial/head.ejs</code>添加下面的一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;sdk.jinrishici.com&#x2F;v2&#x2F;browser&#x2F;jinrishici.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>然后再将<code>/themes/matery/layout/_partial/bg-cover-content.ejs</code>中的<code>&lt;%= config.description %&gt;</code>修改为把<code>&lt;%= config.description %&gt;</code>改为<code>&lt;%- &#39;&lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载今日诗词....&lt;/span&gt;&#39; %&gt;</code>，这个使用前提是将主题配置文件的<code>subtitle</code>的值改为<code>false</code>。</p><h2 id="4-鼠标点击文字特效"><a href="#4-鼠标点击文字特效" class="headerlink" title="4. 鼠标点击文字特效"></a>4. 鼠标点击文字特效</h2><p>实现方法，引入js文件，在主题文件下的<code>/source/js/</code>下新建<code>click_show_text.js</code>，其代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a_idx &#x3D; 0;jQuery(document).ready(function ($) &#123;    $(&quot;body&quot;).click(function (e) &#123;        var a &#x3D; new Array(&quot;富强&quot;, &quot;民主&quot;, &quot;文明&quot;, &quot;和谐&quot;, &quot;自由&quot;, &quot;平等&quot;, &quot;公正&quot;, &quot;法治&quot;, &quot;爱国&quot;, &quot;敬业&quot;, &quot;诚信&quot;, &quot;友善&quot;);        var $i &#x3D; $(&quot;&lt;span&#x2F;&gt;&quot;).text(a[a_idx]);        a_idx &#x3D; (a_idx + 1) % a.length;        var x &#x3D; e.pageX,            y &#x3D; e.pageY;        $i.css(&#123;            &quot;z-index&quot;: 5,            &quot;top&quot;: y - 20,            &quot;left&quot;: x,            &quot;position&quot;: &quot;absolute&quot;,            &quot;font-weight&quot;: &quot;bold&quot;,            &quot;color&quot;: &quot;#FF0000&quot;        &#125;);        $(&quot;body&quot;).append($i);        $i.animate(&#123;                &quot;top&quot;: y - 180,                &quot;opacity&quot;: 0            &#125;,            3000,            function () &#123;                $i.remove();            &#125;);    &#125;);    setTimeout(&#39;delay()&#39;, 2000);&#125;);function delay() &#123;    $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);&#125;</span><br></pre></td></tr></table></figure><p>或者使用我的cdn链接，理论上一直有效<strong><a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/click_show_text.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/Y…</a></strong>，然后在添加到<code>themes/matery/layout/layout.ejs</code>。</p><h2 id="5-修改原有相册"><a href="#5-修改原有相册" class="headerlink" title="5. 修改原有相册"></a>5. 修改原有相册</h2><p>参考教程：<a href="https://liyangzone.com/2019/07/22/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E7%BA%A7%E5%88%86%E7%B1%BB%E7%9B%B8%E5%86%8C/" target="_blank" rel="noopener">传送门</a></p><h2 id="6-添加天气小插件"><a href="#6-添加天气小插件" class="headerlink" title="6. 添加天气小插件"></a>6. 添加天气小插件</h2><p>首先去中国天气官网：<a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">https://cj.weather.com.cn/plu…</a>，配置自己的插件，选择自定义插件—&gt;自定义样式——&gt;生成代码，然后会生成一段代码，复制粘贴到 <code>themes/matery/layout/layout.ejs</code>即可。</p><h2 id="7-关于我页面添加个人简历"><a href="#7-关于我页面添加个人简历" class="headerlink" title="7. 关于我页面添加个人简历"></a>7. 关于我页面添加个人简历</h2><p>打开<code>theme/matery/layout/about.ejs</code>文件，大约在13行。有一个<code>&lt;div class=&quot;card&quot;&gt;</code>标签，找出其对应结尾的标签，大约在61行左右，然后在新增如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;card&quot;&gt;     &lt;div class&#x3D;&quot;card-content&quot;&gt;         &lt;div class&#x3D;&quot;card-content article-card-content&quot;&gt;             &lt;div class&#x3D;&quot;title center-align&quot; data-aos&#x3D;&quot;zoom-in-up&quot;&gt;                 &lt;i class&#x3D;&quot;fa fa-address-book&quot;&gt;&lt;&#x2F;i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __(&#39;个人简历&#39;) %&gt;              &lt;&#x2F;div&gt;                 &lt;div id&#x3D;&quot;articleContent&quot; data-aos&#x3D;&quot;fade-up&quot;&gt;                     &lt;%- page.content %&gt;                 &lt;&#x2F;div&gt;           &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个card，然后<code>/source/about/index.md</code>下面写上你的简历了（就像写博客一样）。</p><h2 id="8-豆瓣书单电影页面"><a href="#8-豆瓣书单电影页面" class="headerlink" title="8. 豆瓣书单电影页面"></a>8. 豆瓣书单电影页面</h2><ol><li>首先在博客站点目录执行下面的命令安装豆瓣插件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><ol><li>紧接着在博客站点目录的配置文件<code>_config.yml</code>下，添加如下配置：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">douban:   user: 252345665    #这个需要修改为你个人的id    builtin: false   #如果想生成豆瓣页面，这个需要设置为true  book:       title: &#39;This is my book title&#39;       quote: &#39;This is my book quote&#39;   movie:       title: &#39;This is my movie title&#39;       quote: &#39;This is my movie quote&#39;   game:       title: &#39;This is my game title&#39;       quote: &#39;This is my game quote&#39;   timeout: 10000</span><br></pre></td></tr></table></figure><ul><li><strong>user</strong>:：你的豆瓣ID。打开豆瓣，登入账户，然后在右上角点击 ”个人主页“，这时候地址栏的URL大概是这样：<a href="https://www.douban.com/people/xxxxxx/" target="_blank" rel="noopener">https://www.douban.com/people…</a> ，其中的”xxxxxx”就是你的个人ID了。</li><li><strong>builtin</strong>：是否将生成页面的功能嵌入 <code>hexo s</code> 和 <code>hexo g</code> 中，默认是 <code>false</code> ，另一可选项为 <code>true</code> 。</li><li><strong>title</strong>： 该页面的标题。</li><li><strong>quote</strong>： 写在页面开头的一段话,支持html语法。</li><li><strong>timeout</strong>： 爬取数据的超时时间，默认是 10000ms，如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。</li></ul><p>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p><ol><li>然后再主题配置文件<code>_config.yml</code>中添加关于此页面的菜单：(下面是我的配置)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu:    媒体:       url: &#x2F;       icon: fas fa-list       children:         - name: 电影           url: &#x2F;movies           icon: fas fa-film         - name: 书单           url: &#x2F;books           icon: fas fa-book         - name: 游戏           url: &#x2F;games           icon: fas fa-gamepad</span><br></pre></td></tr></table></figure><ol><li>适配Matery主题：在 <code>/themes/hexo-theme-matery/layout</code> 文件夹下面创建一个名为 <code>douban.ejs</code> 的文件，并将下面的内容复制进去：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&#39;_partial&#x2F;post-cover&#39;) %&gt; &lt;style&gt;     .hexo-douban-picture img &#123;        width: 100%;     &#125; &lt;&#x2F;style&gt;&lt;main class&#x3D;&quot;content&quot;&gt;     &lt;div id&#x3D;&quot;contact&quot; class&#x3D;&quot;container chip-container&quot;&gt;         &lt;div class&#x3D;&quot;card&quot;&gt;             &lt;div class&#x3D;&quot;card-content&quot; style&#x3D;&quot;padding: 30px&quot;&gt;                 &lt;h1 style&#x3D;&quot;margin: 10px 0 10px 0px;&quot;&gt;&lt;%&#x3D; page.title %&gt;&lt;&#x2F;h1&gt;                 &lt;%- page.content %&gt;             &lt;&#x2F;div&gt;         &lt;&#x2F;div&gt;         &lt;div class&#x3D;&quot;card&quot;&gt;             &lt;div class&#x3D;&quot;card-content&quot; style&#x3D;&quot;text-align: center&quot;&gt;                 &lt;h3 style&#x3D;&quot;margin: 5px 0 5px 5px;&quot;&gt;如果你有好的内容推荐，欢迎在下面留言！&lt;&#x2F;h3&gt;             &lt;&#x2F;div&gt;         &lt;&#x2F;div&gt;         &lt;div class&#x3D;&quot;card&quot;&gt;             &lt;% if (theme.gitalk &amp;&amp; theme.gitalk.enable) &#123; %&gt;                &lt;%- partial(&#39;_partial&#x2F;gitalk&#39;) %&gt;            &lt;% &#125; %&gt;             &lt;% if (theme.gitment.enable) &#123; %&gt;                 &lt;%- partial(&#39;_partial&#x2F;gitment&#39;) %&gt;             &lt;% &#125; %&gt;             &lt;% if (theme.disqus.enable) &#123; %&gt;                 &lt;%- partial(&#39;_partial&#x2F;disqus&#39;) %&gt;             &lt;% &#125; %&gt;             &lt;% if (theme.livere &amp;&amp; theme.livere.enable) &#123; %&gt;                 &lt;%- partial(&#39;_partial&#x2F;livere&#39;) %&gt;             &lt;% &#125; %&gt;             &lt;% if (theme.valine &amp;&amp; theme.valine.enable) &#123; %&gt;                 &lt;%- partial(&#39;_partial&#x2F;valine&#39;) %&gt;             &lt;% &#125; %&gt;         &lt;&#x2F;div&gt;     &lt;&#x2F;div&gt; &lt;&#x2F;main&gt;</span><br></pre></td></tr></table></figure><ol><li>然后在博客站点目录下的<code>node_modules</code>文件夹下找到<code>hexo-douban/lib</code> ，文件夹下有三个js文件，分别为：<code>books-generator.js</code> 、<code>games-generator.js</code> 、<code>movies-generator.js</code>，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* 原文件内容为 layout: [&#96;page&#96;, &#96;post&#96;] ，将其修改为下面的内容*&#x2F;layout: [&#96;page&#96;, &#96;douban&#96;]</span><br></pre></td></tr></table></figure><ol><li>最后就是使用并生成相应的页面，执行命令如下:</li></ol><p>hexo douban</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**需要注意的是**，通常大家都喜欢用 &#96;hexo d&#96; 来作为 &#96;hexo deploy&#96; 命令的简化，但是当安装了 &#96;hexo douban&#96; 之后，就不能用 &#96;hexo d&#96; 了，因为 &#96;hexo douban&#96; 跟 &#96;hexo deploy&#96; 的前缀都是 &#96;hexo d&#96; ，你以后执行的 &#96;hexo d&#96; 将不再是 Hexo 页面的生成，而是豆瓣页面的生成。以下是可选的命令参数：</span><br></pre></td></tr></table></figure><p>-h, –help # 帮助页面<br>-b, –books # 只生成书单页面<br>-g, –games # 只生成游戏页面<br>-m, –movies # 只生成电影页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**当站点配置文件的builtin的值为true时，生成页面的功能会嵌入到&#96;hexo g&#96;和&#96;hexo s&#96;中，在进行部署生成操作，会自动生成相应的页面**。## 9. 外链跳转插件&gt; [hexo-external-link](https:&#x2F;&#x2F;blog.hvnobug.com&#x2F;go.html?url&#x3D;aHR0cHM6Ly9naXRodWIuY29tL2h2bm9idWcvaGV4by1leHRlcm5hbC1saW5r)是一个跳转外链相关插件。自动为所有html文件中外链的a标签生成对应的属性。 比如 设置&#96;target&#x3D;’_blank’, rel&#x3D;’external nofollow noopener noreferrer’&#96; 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下 go.html;使用 npm 或者 yarn 安装</span><br></pre></td></tr></table></figure><h2 id="npm-安装"><a href="#npm-安装" class="headerlink" title="npm 安装"></a>npm 安装</h2><p>npm install hexo-external-link –save</p><h2 id="yarn-安装"><a href="#yarn-安装" class="headerlink" title="yarn 安装"></a>yarn 安装</h2><p>yarn add hexo-external-link</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">之后再hexo博客站点根目录下添加如下配置：</span><br></pre></td></tr></table></figure><p>hexo_external_link:<br>enable: true<br>enable_base64_encode: true<br>url_param_name: ‘u’<br>html_file_name: ‘go.html’<br>target_blank: true<br>link_rel: ‘external nofollow noopener noreferrer’<br>domain: ‘your_domain’ # 如果开启了防盗链<br>safety_chain: true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **enable** - 是否开启&#96;hexo_external_link&#96;插件 - 默认 false- **enable_base64_encode** - 是否对跳转&#96;url&#96;使用&#96;base64编码&#96; - 默认 fasle- **url_param_name** - url参数名,在跳转到外链传递给&#96;html_file_name&#96;的参数名 - 默认 ‘u’- **html_file_name** - 跳转到外链的页面文件路径 - 默认 ‘go.html’- **target_blank** - 是否为外链的&#96;a&#96;标签添加&#96;target&#x3D;&#39;_blank&#39;&#96; - 默认 true- **link_rel** - 设置外链的&#96;a&#96;标签的rel属性 - 默认 ‘external nofollow noopener noreferrer’- **domain** - 如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host- **safety_chain** - go.html 为了防止外链盗用 对域名进行的判断 - 默认 false## 10. 添加动态科技线条背景&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;04.gif&quot; style&#x3D;&quot;zoom:80%;&quot; &#x2F;&gt;在&#96;themes&#x2F;matery&#x2F;layout&#x2F;layout.ejs&#96;文件中添加如下代码：</span><br></pre></td></tr></table></figure><!--动态线条背景--><script type="text/javascript"  color="122 103 238" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js">  </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中：- color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）- opacity：表示线条透明度（0~1），默认：0.5- count：表示线条的总数量，默认：150- zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1## 11. 添加鼠标点击烟花爆炸效果&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;03.gif&quot; style&#x3D;&quot;zoom:80%;&quot; &#x2F;&gt;首先在&#96;themes&#x2F;matery&#x2F;source&#x2F;js&#96;目录下新建&#96;fireworks.js&#96;文件，打开这个网址[传送门](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;js&#x2F;fireworks.js)，将内容复制粘贴到&#96;fireworks.js&#96;即可。然后再&#96;themes&#x2F;matery&#x2F;layout&#x2F;layout.ejs&#96;文件内添加下面的内容：</span><br></pre></td></tr></table></figure><p><canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" ></canvas>  </p><script type="text/javascript" src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"></script><script type="text/javascript" src="/js/fireworks.js"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后&#96;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#96;即可，就可以看到效果了。## 12. 添加樱花飘落效果先看效果：&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;02.gif&quot; style&#x3D;&quot;zoom:80%;&quot; &#x2F;&gt;在&#96;themes&#x2F;matery&#x2F;source&#x2F;js&#96;目录下新建&#96;sakura.js&#96;文件，打开这个网址[传送门](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;js&#x2F;sakura.js)，将内容复制粘贴到sakura.js即可。然后再&#96;themes&#x2F;matery&#x2F;layout&#x2F;layout.ejs&#96;文件内添加下面的内容：</span><br></pre></td></tr></table></figure><script type="text/javascript">  //只在桌面版网页启用特效  var windowWidth = $(window).width();  if (windowWidth > 768) {<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(&#39;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;sakura.js&quot;&gt;&lt;\&#x2F;script&gt;&#39;);</span><br></pre></td></tr></table></figure>}  </script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 13. 添加鼠标彩虹星星掉落跟随效果先看看效果，再决定要不要用。&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;01.gif&quot; style&#x3D;&quot;zoom:80%;&quot; &#x2F;&gt;在&#96;themes&#x2F;matery&#x2F;source&#x2F;js&#96;目录下新建&#96;cursor.js&#96;文件，打开这个网址[传送门](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;js&#x2F;cursor.js)，将内容复制粘贴到cursor.js即可。然后再&#96;themes&#x2F;matery&#x2F;layout&#x2F;layout.ejs&#96;文件内添加下面的内容：</span><br></pre></td></tr></table></figure><script src="/js/cursor.js"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 14. 添加雪花飘落效果先看看效果吧！&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;1.gif&quot; style&#x3D;&quot;zoom:80%;&quot; &#x2F;&gt;在&#96;themes&#x2F;matery&#x2F;source&#x2F;js&#96;目录下新建&#96;snow.js&#96;文件，打开这个网址[传送门](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;js&#x2F;snow1.js)，将内容复制粘贴到cursor.js即可。然后再&#96;themes&#x2F;matery&#x2F;layout&#x2F;layout.ejs&#96;文件内添加下面的内容：</span><br></pre></td></tr></table></figure><script src="/js/snow.js"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 15. 添加自定义页面首先看一下效果吧，我自己写的，写的不好，不要笑我哦！&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20200115.gif&quot; style&#x3D;&quot;zoom:80%;&quot; &#x2F;&gt;以我的配置为例：首先在站点目录下的source文件夹下新建&#96;aboutme&#96;文件，文件名可自定义，然后编写一个&#96;index.html&#96;放入&#96;aboutme&#96;文件夹下，然后在主题配置文件下的导航配置信息添加下面的配置：</span><br></pre></td></tr></table></figure><p>About:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: &#x2F;icon: fas fa-address-cardchildren:  - name: 关于我    url: &#x2F;about    icon: fas fa-user-circle  - name: Another    #这是新添加的，在原有配置基础上添加    url: &#x2F;aboutme    icon: fa fa-user-secret</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后在站点配置文件下，找到&#96;skip_render&#96;，在后面添加属性，如下：</span><br></pre></td></tr></table></figure><p>skip_render: aboutme/** # 其意思为在对文件进行渲染时跳过aboutme文件下的所有文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">知道方法后，你可以添加你自己想要添加的页面，让你的博客内容更加充实。## 16. 添加404页面我的404页面是这样的：![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20200117142120.png)开始说一下配置步骤，首先再站点根目录下的source文件夹下新建&#96;404.md&#96;文件，里面内容如下：</span><br></pre></td></tr></table></figure><hr><p>title: 404<br>date: 2019-10-28 16:41:10<br>type: “404”<br>layout: “404”</p><h2 id="description-“Oops～，我崩溃了！找不到你想要的页面了”"><a href="#description-“Oops～，我崩溃了！找不到你想要的页面了”" class="headerlink" title="description: “Oops～，我崩溃了！找不到你想要的页面了”"></a>description: “Oops～，我崩溃了！找不到你想要的页面了”</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">紧接着再新建主题文件夹的layout目录下新建&#96;404.ejs&#96;文件，添加内容如下：</span><br></pre></td></tr></table></figure><style type="text/css"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* don&#39;t remove. *&#x2F;.about-cover &#123;    height: 90.2vh;&#125;</span><br></pre></td></tr></table></figure></style><div class="bg-cover pd-header about-cover"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;            &lt;div class&#x3D;&quot;brand&quot;&gt;                &lt;div class&#x3D;&quot;title center-align&quot;&gt;                    404                &lt;&#x2F;div&gt;                &lt;div class&#x3D;&quot;description center-align&quot;&gt;                    &lt;%&#x3D; page.description %&gt;                &lt;&#x2F;div&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></div><script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 每天切换 banner 图.  Switch banner image every day.$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.6&#x2F;source&#x2F;medias&#x2F;banner&#x2F;&#39; + new Date().getDay() + &#39;.jpg)&#39;);</span><br></pre></td></tr></table></figure></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后部署，再看看效果即可。## 17. 文章生成永久链接主题默认的文章链接配置是</span><br></pre></td></tr></table></figure><p>premalink: :year/:month/:day/:title</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。首先再根目录下执行下面的命令：[hexo-abbrlinkGitHub地址](https:&#x2F;&#x2F;github.com&#x2F;rozbo&#x2F;hexo-abbrlink)</span><br></pre></td></tr></table></figure><p>npm install hexo-abbrlink –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后再站点配置文件下添加如下配置：</span><br></pre></td></tr></table></figure><p>abbrlink:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alg: crc16   #算法： crc16(default) and crc32rep: hex     #进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再将站点配置文件的&#96;permalink&#96;的值修改为：</span><br></pre></td></tr></table></figure><p>permalink: posts/:abbrlink.html # 此处可以自己设置，也可以直接使用 :/abbrlink</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">生成文章的链接格式就会是如下样例（官方样例）:</span><br></pre></td></tr></table></figure><p>crc16 &amp; hex<br><a href="https://post.zz173.com/posts/66c8.html" target="_blank" rel="noopener">https://post.zz173.com/posts/…</a></p><p>crc16 &amp; dec<br><a href="https://post.zz173.com/posts/65535.html" target="_blank" rel="noopener">https://post.zz173.com/posts/…</a><br>crc32 &amp; hex<br><a href="https://post.zz173.com/posts/8ddf18fb.html" target="_blank" rel="noopener">https://post.zz173.com/posts/…</a></p><p>crc32 &amp; dec<br><a href="https://post.zz173.com/posts/1690090958.html" target="_blank" rel="noopener">https://post.zz173.com/posts/…</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">生成完后，原md文件的Front-matter 内会增加&#96;abbrlink&#96; 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。# 七、添加评论系统我只说几个常用的评论系统的配置方法，其他的就不说了。## 7.1 添加来必力评论系统首先去[来必力官网](https:&#x2F;&#x2F;livere.com&#x2F;)，点击导航栏上的安装，会出现如下图的页面：- City 版：是一款适合所有人使用的免费版本；- Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20200115142313.png&quot; style&#x3D;&quot;zoom:80%;&quot; &#x2F;&gt;注册完之后，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示：![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;image-20200115142709585.png)</span><br></pre></td></tr></table></figure><h1 id="Livere-comment-configuration-the-default-is-not-activated"><a href="#Livere-comment-configuration-the-default-is-not-activated" class="headerlink" title="Livere comment configuration, the default is not activated"></a>Livere comment configuration, the default is not activated</h1><h1 id="Livere-来必力评论模块的配置，默认为不激活"><a href="#Livere-来必力评论模块的配置，默认为不激活" class="headerlink" title="Livere 来必力评论模块的配置，默认为不激活"></a>Livere 来必力评论模块的配置，默认为不激活</h1><p>livere:<br>enable: true # true即为开启评论系统<br>uid: #这里填写你的uid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后在执行相关的部署命令，然后查看效果即可。## 7.2 添加Valine评论系统[Valine官方文档](https:&#x2F;&#x2F;valine.js.org&#x2F;)如果注册过LeanCloud，请点击此处进行[登录](https:&#x2F;&#x2F;leancloud.cn&#x2F;dashboard&#x2F;login.html#&#x2F;signin)，未注册的请点击[注册](https:&#x2F;&#x2F;leancloud.cn&#x2F;dashboard&#x2F;login.html#&#x2F;signup)经过登录或者注册之后再登录，就会进入如下的页面：![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20200115145855.png)创建应用完成后，会出现如下页面，然后点击设置![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20200115150319.png)会出现下面的页面，将其中APPID和APPKey复制，添加到配置文件中。![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20200115150641.png)</span><br></pre></td></tr></table></figure><h1 id="The-configuration-of-the-Valine-comment-module-is-not-activated-by-default"><a href="#The-configuration-of-the-Valine-comment-module-is-not-activated-by-default" class="headerlink" title="The configuration of the Valine comment module is not activated by default."></a>The configuration of the Valine comment module is not activated by default.</h1><h1 id="To-use-it-activate-the-configuration-item-and-set-appId-and-appKey"><a href="#To-use-it-activate-the-configuration-item-and-set-appId-and-appKey" class="headerlink" title="To use it, activate the configuration item and set appId and appKey."></a>To use it, activate the configuration item and set appId and appKey.</h1><h1 id="Valine-评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置-appId-和-appKey"><a href="#Valine-评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置-appId-和-appKey" class="headerlink" title="Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey."></a>Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.</h1><p>valine:<br>enable: false # true即为开启评论系统<br>appId: #此处填写你的appid<br>appKey: #此处填写你的appkey<br>notify: false<br>verify: false<br>visitor: true<br>avatar: ‘mm’ # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide<br>pageSize: 10<br>placeholder: ‘just go go’ # Comment Box placeholder<br>background: <a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.6/social/comment_bg.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/Y…</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后执行相关部署命令，查看效果即可。## 7.3 添加Gitalk评论模块首先去这个地方看一下Gitalk的效果吧！[传送门](https:&#x2F;&#x2F;gitalk.github.io&#x2F;)安装步骤如下：1. **注册 OAuth Application**当别人评论你的文章时，会需要它是授权。点击[注册 OAuth Application](https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;applications&#x2F;new)进行注册，注册界面如下：![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20200115154248.png)- **Application name：**应用名称，自己随意起名。- **Homepage URL：**博客主页地址，如果有域名，此处填写域名，无域名，填写你的默认github地址：如&#96;https:&#x2F;&#x2F;username.github.io&#96;。- **Application description：**应用描述，可选，可以写也可以不写。- **Authorization callback URL：**授权后返回的地址，需要与**Homepage URL**一致。点击 **Register application**（注册）会出现 **Client ID&#x2F;Secret**，接下来就是将信息填入配置文件中。![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20200115155054.png)2. **新建GitHub仓库**新建仓库就不在多说了，相信大家都会，如果不会的话，上面有写。3. **配置 _config.yml 文件**</span><br></pre></td></tr></table></figure><h1 id="the-Gitalk-config，default-disabled"><a href="#the-Gitalk-config，default-disabled" class="headerlink" title="the Gitalk config，default disabled"></a>the Gitalk config，default disabled</h1><h1 id="Gitalk-评论模块的配置，默认为不激活"><a href="#Gitalk-评论模块的配置，默认为不激活" class="headerlink" title="Gitalk 评论模块的配置，默认为不激活"></a>Gitalk 评论模块的配置，默认为不激活</h1><p>gitalk:<br>enable: true # true即开启评论模块<br>owner: Yafine # 填写你的 github 账户名即可<br>repo: Yafine-gitalks # 新建一个仓库或者使用博客托管的仓库也可<br>oauth:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clientId: #填写你的clientIdclientSecret:  #填写你的clientSecret</span><br></pre></td></tr></table></figure><p>admin: Yafine #填写你的 github 账户名即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 然后再进行部署步骤即可，第一次查看效果需要登录github账号，关联授权后，就可以使用评论系统了。## 7.4 添加Disqus评论模块还在完善，这个貌似得科学上网才能注册。有时间再写吧。# 八、域名解析与绑定域名的购买流程我就不说了，相信大家应该都会购买吧，一般都会去阿里云或者腾讯云购买域名。下面就简单的说一下，如何绑定域名并进行解析。在这里以腾讯云解析为例（我的域名是在腾讯云购买的），登录腾讯云的控制台，进入到域名管理页面，然后点击解析，进行域名的解析，如下图所示：![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20191205232306.png)进入云解析列表，添加记录值如下图所示：IP地址可以提供cmd命令得到，命令为&#96;ping github.com&#96;，会得到来自&#96;xxx.xxx.xxx.xxx&#96;的回复，这个就是github的IP地址，将得到的IP地址填入记录值即可，如下图所示。![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20191205231816.png)**说明：** 以我的域名为例：yafine-blog.cn&gt; **提示：**要解析&#96; www.yafine-blog.cn&#96;，请填写 www。主机记录就是域名前缀，常见用法如下：| 主机记录 | 说明                                                    || -------- | ------------------------------------------------------- || www      | 解析后的域名为&#96;www.yafine-blog.cn&#96;                      || @        | 直接解析主域名yafine-blog.cn                            || *        | 泛解析，匹配其他所有域名*.yafine-blog.cn                || mail     | 将域名解析为mail.yafine-blog.cn，通常用于解析邮箱服务器 || 二级域名 | 如abc.yafine-blog.cn，填写abc                           || 手机网站 | 如m.yafine-blog.cn，填写m                               |&gt; **提示:**&gt;&gt; 将域名指向云服务器，请选择**「A」**；&gt; 将域名指向另一个域名，请选择**「CNAME」**；&gt; 建立邮箱请选择**「MX」**，根据邮箱服务商提供的MX记录填写。| 记录类型 | 说明                                                         || -------- | ------------------------------------------------------------ || A        | 用来指定域名的IPv4地址（如8.8.8.8），如果需要将域名指向一个IP地址，就需要添加A记录。 || CNAME    | 如果需要将域名指向另一个域名，再由另一个域名提供IP地址，就需要添加CNAME记录。 || MX       | 如果需要设置邮箱，让邮箱能收到邮件，就需要添加MX记录。       || TXT      | 在这里可以填写任何东西，长度限制255。绝大多数的TXT记录是用来做SPF记录（反垃圾邮件） || NS       | 域名服务器记录，如果需要将子域名交给其他DNS服务商解析，就需要添加NS记录。 || AAAA     | 用来指定主机名（或域名）对应的IPv6地址（例如：ff06:0:0:0:0:0:0:c3）记录。 || SRV      | 记录了哪台计算机提供了哪个服务。格式为：服务的名字、点、协议的类型，例如：_xmpp-server_tcp。 || 显性URL  | 从一个地址301重定向到另一个地址的时候，就需要添加显性URL记录（注：DNSPod目前只支持301重定向）。 || 隐性URL  | 类似于显性URL，区别在于隐性URL不会改变地址栏的域名。         |&gt; **注意**：在这之前需要在站点根目录的source目录下新建一个CNAME文件，里面写入自己的域名，然后保存，在进行如下的步骤。这样到最后当你在地址栏输入xxx.github.io时，才会自动跳转到你的域名。然后在你的GitHub仓库的设置里找到这个页面，将你的域名填到Custom domain选项下，强制开启https，即当你在地址栏输入域名，会自动识别域名为https开头。然后进行保存。![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20191205230514.png)# 九、 博客优化## 1. 图片懒加载&gt; **知识小课堂：**图片加载方式有两种，一个是预加载，另一个就是懒加载，那你了解什么是预加载和懒加载吗？下面来学习一下。&gt;&gt; 参考：[图片预加载与图片懒加载（缓载）的区别与实现](https:&#x2F;&#x2F;blog.csdn.net&#x2F;alex8046&#x2F;article&#x2F;details&#x2F;50388050)- 图片预加载：顾名思义，图片预加载就是在网页全部加载之前，提前加载图片。当用户需要查看时可直接从本地缓存中渲染，以提供给用户更好的体验，减少等待的时间。否则，如果一个页面的内容过于庞大，没有使用预加载技术的页面就会长时间的展现为一片空白，这样浏览者可能以为图片预览慢而没兴趣浏览，把网页关掉，这时，就需要图片预加载。当然这种做法实际上牺牲了服务器的性能换取了更好的用户体验。- 图片懒加载（缓载）：延迟加载图片或符合某些条件时才加载某些图片。这样做的好处是减少不必要的访问数据库或延迟访问数据库的次数，因为每次访问数据库都是比较耗时的即只有真正使用该对象的数据时才会创建。懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。**预加载与懒加载的区别之处：**两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预载则会增加服务器前端压力。---使用图片懒加载需要安装插件：[hexo-lazyload-image](https:&#x2F;&#x2F;github.com&#x2F;Troy-Yang&#x2F;hexo-lazyload-image)在站点根目录执行下面的命令：</span><br></pre></td></tr></table></figure><p>npm install hexo-lazyload-image –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">之后在站点配置文件下添加下面的代码：</span><br></pre></td></tr></table></figure><p>lazyload:<br>enable: true # 是否开启图片懒加载<br>onlypost: false # 是否只对文章的图片做懒加载<br>loadingImg: # eg ./images/loading.gif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">最后执行&#96;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#96;就可以看到效果了。## 2. 代码压缩### 方法一：gulp代码压缩因为hexo生成的html、css、js等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的“压缩”。有人说空格换行能占多少字节？确实占不了多少，但是一个人访问是这么多字节，那么一百人，一万人呢？加起来这量就不少了吧，这都是流量啊！这也是很多css&#x2F;js文件的后缀为*.min.js或*.min.css的原因。虽然我们可能没那么多访问量，但是能减小一点资源文件的大小也是对访问速度有那么一点提升的。我们采用gulp代码压缩方式。**使用方法：**1. 进入站点根目录下依次执行下面的命令：</span><br></pre></td></tr></table></figure><h1 id="全局安装gulp模块"><a href="#全局安装gulp模块" class="headerlink" title="全局安装gulp模块"></a>全局安装gulp模块</h1><p>npm install gulp -g</p><h1 id="安装各种小功能模块-执行这步的时候，可能会提示权限的问题，最好以管理员模式执行"><a href="#安装各种小功能模块-执行这步的时候，可能会提示权限的问题，最好以管理员模式执行" class="headerlink" title="安装各种小功能模块 执行这步的时候，可能会提示权限的问题，最好以管理员模式执行"></a>安装各种小功能模块 执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</h1><p>npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin –save</p><h1 id="额外的功能模块"><a href="#额外的功能模块" class="headerlink" title="额外的功能模块"></a>额外的功能模块</h1><p>npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 在Hexo根目录新建文件 &#96;gulpfile.js&#96;，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。</span><br></pre></td></tr></table></figure><p>var gulp = require(“gulp”);<br>var debug = require(“gulp-debug”);<br>var cleancss = require(“gulp-clean-css”); //css压缩组件<br>var uglify = require(“gulp-uglify”); //js压缩组件<br>var htmlmin = require(“gulp-htmlmin”); //html压缩组件<br>var htmlclean = require(“gulp-htmlclean”); //html清理组件<br>var imagemin = require(“gulp-imagemin”); //图片压缩组件<br>var changed = require(“gulp-changed”); //文件更改校验组件<br>var gulpif = require(“gulp-if”); //任务 帮助调用组件<br>var plumber = require(“gulp-plumber”); //容错组件（发生错误不跳出任务，并报出错误内容）<br>var isScriptAll = true; //是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)<br>var isDebug = true; //是否调试显示 编译通过的文件<br>var gulpBabel = require(“gulp-babel”);<br>var es2015Preset = require(“babel-preset-es2015”);<br>var del = require(“del”);<br>var Hexo = require(“hexo”);<br>var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象</p><p>// 清除public文件夹<br>gulp.task(“clean”, function () {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return del([&quot;public&#x2F;**&#x2F;*&quot;]);</span><br></pre></td></tr></table></figure><p>});</p><p>// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return<br>// 创建静态页面 （等同 hexo generate）<br>gulp.task(“generate”, function () {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return hexo.init().then(function () &#123;    return hexo        .call(&quot;generate&quot;, &#123;            watch: false        &#125;)        .then(function () &#123;            return hexo.exit();        &#125;)        .catch(function (err) &#123;            return hexo.exit(err);        &#125;);&#125;);</span><br></pre></td></tr></table></figure><p>});</p><p>// 启动Hexo服务器<br>gulp.task(“server”, function () {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return hexo    .init()    .then(function () &#123;        return hexo.call(&quot;server&quot;, &#123;&#125;);    &#125;)    .catch(function (err) &#123;        console.log(err);    &#125;);</span><br></pre></td></tr></table></figure><p>});</p><p>// 部署到服务器<br>gulp.task(“deploy”, function () {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return hexo.init().then(function () &#123;    return hexo        .call(&quot;deploy&quot;, &#123;            watch: false        &#125;)        .then(function () &#123;            return hexo.exit();        &#125;)        .catch(function (err) &#123;            return hexo.exit(err);        &#125;);&#125;);</span><br></pre></td></tr></table></figure><p>});</p><p>// 压缩public目录下的js文件<br>gulp.task(“compressJs”, function () {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return gulp    .src([&quot;.&#x2F;public&#x2F;**&#x2F;*.js&quot;, &quot;!.&#x2F;public&#x2F;libs&#x2F;**&quot;]) &#x2F;&#x2F;排除的js    .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&quot;)))    .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress JS:&quot; &#125;)))    .pipe(plumber())    .pipe(        gulpBabel(&#123;            presets: [es2015Preset] &#x2F;&#x2F; es5检查机制        &#125;)    )    .pipe(uglify()) &#x2F;&#x2F;调用压缩组件方法uglify(),对合并的文件进行压缩    .pipe(gulp.dest(&quot;.&#x2F;public&quot;)); &#x2F;&#x2F;输出到目标目录</span><br></pre></td></tr></table></figure><p>});</p><p>// 压缩public目录下的css文件<br>gulp.task(“compressCss”, function () {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var option &#x3D; &#123;    rebase: false,    &#x2F;&#x2F;advanced: true, &#x2F;&#x2F;类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]    compatibility: &quot;ie7&quot; &#x2F;&#x2F;保留ie7及以下兼容写法 类型：String 默认：&#39;&#39;or&#39;*&#39; [启用兼容模式； &#39;ie7&#39;：IE7兼容模式，&#39;ie8&#39;：IE8兼容模式，&#39;*&#39;：IE9+兼容模式]    &#x2F;&#x2F;keepBreaks: true, &#x2F;&#x2F;类型：Boolean 默认：false [是否保留换行]    &#x2F;&#x2F;keepSpecialComments: &#39;*&#39; &#x2F;&#x2F;保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀&#125;;return gulp    .src([&quot;.&#x2F;public&#x2F;**&#x2F;*.css&quot;, &quot;!.&#x2F;public&#x2F;**&#x2F;*.min.css&quot;]) &#x2F;&#x2F;排除的css    .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&quot;)))    .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress CSS:&quot; &#125;)))    .pipe(plumber())    .pipe(cleancss(option))    .pipe(gulp.dest(&quot;.&#x2F;public&quot;));</span><br></pre></td></tr></table></figure><p>});</p><p>// 压缩public目录下的html文件<br>gulp.task(“compressHtml”, function () {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var cleanOptions &#x3D; &#123;    protect: &#x2F;&lt;\!--%fooTemplate\b.*?%--&gt;&#x2F;g, &#x2F;&#x2F;忽略处理    unprotect: &#x2F;&lt;script [^&gt;]*\btype&#x3D;&quot;text\&#x2F;x-handlebars-template&quot;[\s\S]+?&lt;\&#x2F;script&gt;&#x2F;gi &#x2F;&#x2F;特殊处理&#125;;var minOption &#x3D; &#123;    collapseWhitespace: true, &#x2F;&#x2F;压缩HTML    collapseBooleanAttributes: true, &#x2F;&#x2F;省略布尔属性的值 &lt;input checked&#x3D;&quot;true&quot;&#x2F;&gt; &#x3D;&#x3D;&gt; &lt;input &#x2F;&gt;    removeEmptyAttributes: true, &#x2F;&#x2F;删除所有空格作属性值 &lt;input id&#x3D;&quot;&quot; &#x2F;&gt; &#x3D;&#x3D;&gt; &lt;input &#x2F;&gt;    removeScriptTypeAttributes: true, &#x2F;&#x2F;删除&lt;script&gt;的type&#x3D;&quot;text&#x2F;javascript&quot;    removeStyleLinkTypeAttributes: true, &#x2F;&#x2F;删除&lt;style&gt;和&lt;link&gt;的type&#x3D;&quot;text&#x2F;css&quot;    removeComments: true, &#x2F;&#x2F;清除HTML注释    minifyJS: true, &#x2F;&#x2F;压缩页面JS    minifyCSS: true, &#x2F;&#x2F;压缩页面CSS    minifyURLs: true &#x2F;&#x2F;替换页面URL&#125;;return gulp    .src(&quot;.&#x2F;public&#x2F;**&#x2F;*.html&quot;)    .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress HTML:&quot; &#125;)))    .pipe(plumber())    .pipe(htmlclean(cleanOptions))    .pipe(htmlmin(minOption))    .pipe(gulp.dest(&quot;.&#x2F;public&quot;));</span><br></pre></td></tr></table></figure><p>});</p><p>// 压缩 public/medias 目录内图片<br>gulp.task(“compressImage”, function () {</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var option &#x3D; &#123;    optimizationLevel: 5, &#x2F;&#x2F;类型：Number 默认：3 取值范围：0-7（优化等级）    progressive: true, &#x2F;&#x2F;类型：Boolean 默认：false 无损压缩jpg图片    interlaced: false, &#x2F;&#x2F;类型：Boolean 默认：false 隔行扫描gif进行渲染    multipass: false &#x2F;&#x2F;类型：Boolean 默认：false 多次优化svg直到完全优化&#125;;return gulp    .src(&quot;.&#x2F;public&#x2F;medias&#x2F;**&#x2F;*.*&quot;)    .pipe(gulpif(!isScriptAll, changed(&quot;.&#x2F;public&#x2F;medias&quot;)))    .pipe(gulpif(isDebug, debug(&#123; title: &quot;Compress Images:&quot; &#125;)))    .pipe(plumber())    .pipe(imagemin(option))    .pipe(gulp.dest(&quot;.&#x2F;public&quot;));</span><br></pre></td></tr></table></figure><p>});<br>// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器<br>gulp.task(</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;,gulp.series(    &quot;clean&quot;,    &quot;generate&quot;,    &quot;compressHtml&quot;,    &quot;compressCss&quot;,    &quot;compressJs&quot;,    &quot;compressImage&quot;,    gulp.parallel(&quot;deploy&quot;))</span><br></pre></td></tr></table></figure><p>);</p><p>// 默认任务<br>gulp.task(</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;default&quot;,gulp.series(    &quot;clean&quot;,    &quot;generate&quot;,    gulp.parallel(&quot;compressHtml&quot;, &quot;compressCss&quot;, &quot;compressJs&quot;,&quot;compressImage&quot;))</span><br></pre></td></tr></table></figure><p>);<br>//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 以后的执行方式有两种：   - 直接在Hexo根目录执行 &#96;gulp&#96;或者 &#96;gulp default&#96; ，这个命令相当于 &#96;hexo cl&amp;&amp;hexo g&#96; 并且再把代码和图片压缩。   - 在Hexo根目录执行 &#96;gulp build&#96; ，这个命令与第1种相比是：在最后又加了个 &#96;hexo d&#96; ，等于说生成、压缩文件后又帮你自动部署了。&gt; 值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第154行的 &#96;&quot;compressImage&quot;,&#96; 和第165行的 &#96;,&quot;compressImage&quot;&#96; 去掉即可### 方法二：hexo-neat插件实现代码压缩可能以上方法比较复杂，来介绍个简单的，[hexo-neat](https:&#x2F;&#x2F;github.com&#x2F;rozbo&#x2F;hexo-neat)插件也是用来压缩代码的，底层也是通过gulp来实现的。但是这个插件是有Bug的：- 压缩 md 文件会使 markdown 语法的代码块消失- 会删除全角空格在博客站点根目录执行安装代码：</span><br></pre></td></tr></table></figure><p>npm install hexo-neat –save</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">紧接着在站点根目录下的配置文件添加如下代码：</span><br></pre></td></tr></table></figure><p>neat_enable: true<br>neat_html:<br>enable: true<br>exclude:<br>neat_css:<br>enable: true<br>exclude:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &#39;*.min.css&#39;</span><br></pre></td></tr></table></figure><p>neat_js:<br>enable: true<br>mangle: true<br>output:<br>compress:<br>exclude:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &#39;*.min.js&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后直接 &#96;hexo cl&amp;&amp;hexo g&#96; 就可以了，会自动压缩文件 。**补充**：为了解决以上Bug，**对于matery主题**（其他主题自行解决）需要将以上默认配置修改为：</span><br></pre></td></tr></table></figure><h1 id="hexo-neat-优化提速插件（去掉HTML、css、js的blank字符）"><a href="#hexo-neat-优化提速插件（去掉HTML、css、js的blank字符）" class="headerlink" title="hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）"></a>hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</h1><p>neat_enable: true<br>neat_html:<br>enable: true<br>exclude:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &#39;**&#x2F;*.md&#39;</span><br></pre></td></tr></table></figure><p>neat_css:<br>enable: true<br>exclude:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &#39;**&#x2F;*.min.css&#39;</span><br></pre></td></tr></table></figure><p>neat_js:<br>enable: true<br>mangle: true<br>output:<br>compress:<br>exclude:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &#39;**&#x2F;*.min.js&#39;- &#39;**&#x2F;**&#x2F;instantpage.js&#39;- &#39;**&#x2F;matery.js&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 3. CDN加速&gt; CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。1. 首先新建GitHub仓库![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20191221175839.png)2. 克隆到GitHub仓库到本地点击图中所示的&#96;Clone or download&#96;按钮，一键复制仓库地址。![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20191221180643.png)自己在本地磁盘执行以下命令：</span><br></pre></td></tr></table></figure><p>git clone 复制的仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 上传资源复制需要上传的资源到本地git仓库（注：jsDelivr不支持加载超过20M的资源），在本地git仓库目录下右键 Git Bash Here，执行以下命令：</span><br></pre></td></tr></table></figure><p>git status //查看状态<br>git add . //添加所有文件到暂存区<br>git commit -m ‘第一次提交’ //把文件提交到仓库,添加描述<br>git push //推送至远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 发布仓库点击release，进行版本的发布。![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20191221183016.png)自定义发布版本号，添加标题和描述等![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;Yafine-imgs&#x2F;images&#x2F;20191221183244.png)5. 通过jsdelivr引用资源使用方法：https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;你的用户名&#x2F;你的仓库名@发布的版本号&#x2F;文件路径例如：https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;medias&#x2F;avatar.jpg  https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;css&#x2F;gallery.csshttps:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Yafine&#x2F;cdn@2.5&#x2F;source&#x2F;loading4.gif注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：- &#x2F;&#x2F; 加载任何Github发布、提交或分支  https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;user&#x2F;repo@version&#x2F;file- &#x2F;&#x2F; 加载 jQuery v3.2.1  https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;jquery&#x2F;jquery@3.2.1&#x2F;dist&#x2F;jquery.min.js- &#x2F;&#x2F; 使用版本范围而不是特定版本</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://segmentfault.com/a/1190000021614307?utm_source=tag-newest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="hexo,教程" scheme="http://yoursite.com/tags/hexo-%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>工地有复工的迹象</title>
    <link href="http://yoursite.com/2020/02/23/gong-di-you-fu-gong-de-ji-xiang/"/>
    <id>http://yoursite.com/2020/02/23/gong-di-you-fu-gong-de-ji-xiang/</id>
    <published>2020-02-23T02:03:16.000Z</published>
    <updated>2020-02-24T07:21:42.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="syringe-昨天听到小区后面有人施工"><a href="#syringe-昨天听到小区后面有人施工" class="headerlink" title=":syringe:   昨天听到小区后面有人施工"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f489.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f489.png?v8">💉</span>   昨天听到小区后面有人施工</h3><blockquote><p>从过年到现在终于有点人气了，我也终于可以下楼了，被社区隔离了一个多月啊，小城市现在已经有工人施工了，大城市也许就没怎么好了吧，大城市想复工我估计也得要半个多月时间，疫情现在还是在涨没有回落，希望早点结束…</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;syringe-昨天听到小区后面有人施工&quot;&gt;&lt;a href=&quot;#syringe-昨天听到小区后面有人施工&quot; class=&quot;headerlink&quot; title=&quot;:syringe:   昨天听到小区后面有人施工&quot;&gt;&lt;/a&gt;&lt;span class=&quot;github-em
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="疫情" scheme="http://yoursite.com/tags/%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>博客手打学习</title>
    <link href="http://yoursite.com/2020/02/23/shou-da-xue-xi/"/>
    <id>http://yoursite.com/2020/02/23/shou-da-xue-xi/</id>
    <published>2020-02-23T01:30:33.000Z</published>
    <updated>2020-02-23T03:38:07.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🐉-手打学习"><a href="#🐉-手打学习" class="headerlink" title="🐉 手打学习"></a>🐉 手打学习</h3><blockquote><p>最近几天疫情也不知道怎么样了，一直也没看新闻，自己也被隔离了一个多月了，</p><p>昨天打电话给社区说家里啥吃的也没有了，要是还不让我出去买东西，那只能社区</p><p>帮忙送了😅 ,我是真的不想麻烦社区，自己吃啥也不好张口说呀，今天看到我家附近</p><p>的一个广场工程有人开始简单的施工了，不过我家这里好像不是那么严重，全市有</p><p>8例左右，不过今天看了一下新闻武汉那些大城市还是挺严重的，</p></blockquote><p><img src="" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;🐉-手打学习&quot;&gt;&lt;a href=&quot;#🐉-手打学习&quot; class=&quot;headerlink&quot; title=&quot;🐉 手打学习&quot;&gt;&lt;/a&gt;🐉 手打学习&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近几天疫情也不知道怎么样了，一直也没看新闻，自己也被隔离了一个多月了，&lt;
      
    
    </summary>
    
    
      <category term="日志" scheme="http://yoursite.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
